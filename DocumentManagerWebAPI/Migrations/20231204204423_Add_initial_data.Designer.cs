// <auto-generated />
using System;
using DocumentManagerWebAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DocumentManagerWebAPI.Migrations
{
    [DbContext(typeof(DocumentManagerContext))]
    [Migration("20231204204423_Add_initial_data")]
    partial class Add_initial_data
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DocumentManagerWebAPI.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AccountId"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("AccountId");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Account");

                    b.HasData(
                        new
                        {
                            AccountId = 1,
                            Login = "admin",
                            Password = "admin",
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("DocumentManagerWebAPI.Models.Administrator", b =>
                {
                    b.Property<int>("AdministratorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AdministratorId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("AdministratorId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Administrator");

                    b.HasData(
                        new
                        {
                            AdministratorId = 1,
                            AccountId = 1,
                            Name = "Марина",
                            PhoneNumber = "+375172938824",
                            Surname = "Борисик"
                        });
                });

            modelBuilder.Entity("DocumentManagerWebAPI.Models.Application", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ApplicationId"));

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("JSONB");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<int>("TemplateId")
                        .HasColumnType("integer");

                    b.HasKey("ApplicationId");

                    b.HasIndex("StatusId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TemplateId");

                    b.ToTable("Application");
                });

            modelBuilder.Entity("DocumentManagerWebAPI.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EmployeeId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<int>("FacultyId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("WorkbookNumber")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("FacultyId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("DocumentManagerWebAPI.Models.Faculty", b =>
                {
                    b.Property<int>("FacultyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FacultyId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("FacultyId");

                    b.ToTable("Faculty");

                    b.HasData(
                        new
                        {
                            FacultyId = 1,
                            Name = "ФКП"
                        },
                        new
                        {
                            FacultyId = 2,
                            Name = "ИЭФ"
                        },
                        new
                        {
                            FacultyId = 3,
                            Name = "КСИС"
                        });
                });

            modelBuilder.Entity("DocumentManagerWebAPI.Models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GroupId"));

                    b.Property<string>("GroupNumber")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("integer");

                    b.Property<string>("Tutor")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("GroupId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("Group");

                    b.HasData(
                        new
                        {
                            GroupId = 1,
                            GroupNumber = "110901",
                            SpecialtyId = 1,
                            Tutor = "Коркин",
                            Year = 2021
                        },
                        new
                        {
                            GroupId = 2,
                            GroupNumber = "110902",
                            SpecialtyId = 1,
                            Tutor = "Борисик",
                            Year = 2021
                        },
                        new
                        {
                            GroupId = 3,
                            GroupNumber = "110101",
                            SpecialtyId = 2,
                            Tutor = "Кот Борис",
                            Year = 2021
                        },
                        new
                        {
                            GroupId = 4,
                            GroupNumber = "114002",
                            SpecialtyId = 3,
                            Tutor = "Пол Уокер",
                            Year = 2021
                        },
                        new
                        {
                            GroupId = 5,
                            GroupNumber = "123456",
                            SpecialtyId = 4,
                            Tutor = "Алексей Суховаров",
                            Year = 2021
                        },
                        new
                        {
                            GroupId = 6,
                            GroupNumber = "123455",
                            SpecialtyId = 5,
                            Tutor = "Вин Дизель",
                            Year = 2021
                        },
                        new
                        {
                            GroupId = 7,
                            GroupNumber = "112334",
                            SpecialtyId = 6,
                            Tutor = "Вин Бензин",
                            Year = 2021
                        },
                        new
                        {
                            GroupId = 8,
                            GroupNumber = "122334",
                            SpecialtyId = 7,
                            Tutor = "Вин Газ",
                            Year = 2021
                        },
                        new
                        {
                            GroupId = 9,
                            GroupNumber = "122334",
                            SpecialtyId = 6,
                            Tutor = "Вин Код",
                            Year = 2021
                        });
                });

            modelBuilder.Entity("DocumentManagerWebAPI.Models.Specialty", b =>
                {
                    b.Property<int>("SpecialtyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SpecialtyId"));

                    b.Property<int>("FacultyId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("SpecialtyId");

                    b.HasIndex("FacultyId");

                    b.ToTable("Specialty");

                    b.HasData(
                        new
                        {
                            SpecialtyId = 1,
                            FacultyId = 1,
                            Name = "ИПОИТ"
                        },
                        new
                        {
                            SpecialtyId = 2,
                            FacultyId = 1,
                            Name = "ИСиТ (в ОПБ)"
                        },
                        new
                        {
                            SpecialtyId = 3,
                            FacultyId = 1,
                            Name = "ИСиТ (в БМ)"
                        },
                        new
                        {
                            SpecialtyId = 4,
                            FacultyId = 2,
                            Name = "ИСиТ (в Логистике)"
                        },
                        new
                        {
                            SpecialtyId = 5,
                            FacultyId = 2,
                            Name = "ИСиТ (в Экономике)"
                        },
                        new
                        {
                            SpecialtyId = 6,
                            FacultyId = 3,
                            Name = "ПОИТ"
                        },
                        new
                        {
                            SpecialtyId = 7,
                            FacultyId = 3,
                            Name = "ВМСиС"
                        });
                });

            modelBuilder.Entity("DocumentManagerWebAPI.Models.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StatusId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("StatusId");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("DocumentManagerWebAPI.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StudentId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("StudentCardId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("StudentId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("GroupId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("DocumentManagerWebAPI.Models.Template", b =>
                {
                    b.Property<int>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TemplateId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("Form")
                        .IsRequired()
                        .HasColumnType("JSONB");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("TemplateHtml")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("TemplateId");

                    b.ToTable("Template");
                });

            modelBuilder.Entity("DocumentManagerWebAPI.Models.Administrator", b =>
                {
                    b.HasOne("DocumentManagerWebAPI.Models.Account", null)
                        .WithOne()
                        .HasForeignKey("DocumentManagerWebAPI.Models.Administrator", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DocumentManagerWebAPI.Models.Application", b =>
                {
                    b.HasOne("DocumentManagerWebAPI.Models.Status", null)
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocumentManagerWebAPI.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocumentManagerWebAPI.Models.Template", null)
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DocumentManagerWebAPI.Models.Employee", b =>
                {
                    b.HasOne("DocumentManagerWebAPI.Models.Account", null)
                        .WithOne()
                        .HasForeignKey("DocumentManagerWebAPI.Models.Employee", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocumentManagerWebAPI.Models.Faculty", null)
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DocumentManagerWebAPI.Models.Group", b =>
                {
                    b.HasOne("DocumentManagerWebAPI.Models.Specialty", null)
                        .WithMany()
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DocumentManagerWebAPI.Models.Specialty", b =>
                {
                    b.HasOne("DocumentManagerWebAPI.Models.Faculty", null)
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DocumentManagerWebAPI.Models.Student", b =>
                {
                    b.HasOne("DocumentManagerWebAPI.Models.Account", null)
                        .WithOne()
                        .HasForeignKey("DocumentManagerWebAPI.Models.Student", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocumentManagerWebAPI.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
